import TestQuestions
import random
import colleges_Info

QUESTION_LIST = TestQuestions.QUESTIONS


class Participant:
    def __init__(self):
        self.extraversion_score = 0
        self.neuroticism_score = 0
        self.lie_score = 0
        self.current_answers = []


participant = Participant()


class Main:
    # Подсчёт очков за личностный тест
    def check_answers(self, participant_answers,
                      extravert_introvert_yes=TestQuestions.EXTROVERSION_INTROVERSION_YES,
                      extravert_introvert_no=TestQuestions.EXTROVERSION_INTROVERSION_NO,
                      neuroticism=TestQuestions.NEUROTICISM_YES,
                      lie_scale_yes=TestQuestions.LIE_SCALE_YES,
                      lie_scale_no=TestQuestions.LIE_SCALE_NO
                      ):

        for question_number, answer in enumerate(participant_answers, start=1):
            if question_number in extravert_introvert_yes and answer == True:
                participant.extraversion_score += 1

            elif question_number in extravert_introvert_no and answer == False:
                participant.extraversion_score += 1

            elif question_number in neuroticism and answer == True:
                participant.neuroticism_score += 1

            elif question_number in lie_scale_yes and answer == True:
                participant.lie_score += 1

            elif question_number in lie_scale_no and answer == False:
                participant.lie_score += 1

    # Существует координатная плоскость темпераментов. Функция рассчитывает конкретный.
    def check_temperament(self, extravert_scr, neuroticism_scr, lie_scr):
        def check_extraversion(extravert_score=extravert_scr):
            if extravert_score >= 19:
                return 'Яркий экстраверт'

            elif extravert_score >= 15:
                return 'Экстраверт'

            elif 9 < extravert_score < 15:
                return 'Среднее значение'

            elif extravert_score <= 5:
                return 'Глубокий интроверт'

            elif extravert_score <= 9:
                return 'Интроверт'

        def check_neuroticism(neuroticism_score=neuroticism_scr):
            if neuroticism_score > 19:
                return 'Очень высокий уровень нейротизма'

            elif neuroticism_score > 14:
                return 'Экстраверт'

            elif 10 <= neuroticism_score <= 14:
                return 'Среднее значение'

            elif neuroticism_score <= 9:
                return 'Низкий уровень нейротизма'

        def check_lie(lie_score=lie_scr):
            if lie_score >= 4:
                return 'Неискренность в ответах'

            elif lie_score < 4:
                return 'Норма'

        return [check_extraversion(), check_neuroticism(), check_lie()]

    def temperament_calculate(self, extraversion_score, neuroticism_score, lie_score):
        participant_is_lying = False

        if lie_score > 4:
            participant_is_lying = True

        if 0 <= extraversion_score <= 12 and 12 <= neuroticism_score <= 24:
            return 'меланхолик', participant_is_lying

        elif 0 <= extraversion_score <= 12 and 0 <= neuroticism_score <= 12:
            return 'флегматик', participant_is_lying

        elif 12 <= extraversion_score <= 24 and 0 <= neuroticism_score <= 12:
            return 'сангвиник', participant_is_lying

        elif 12 <= extraversion_score <= 24 and 12 <= neuroticism_score <= 24:
            return 'холерик', participant_is_lying

    # Возвращает текст с теорией о темпераменте участника
    def get_temperament_text(self, temperament, user_lying=False):
        if user_lying:
            return str(TestQuestions.TEMPERAMENT[temperament]) + TestQuestions.INSINCERITY_TEXT

        return str(TestQuestions.TEMPERAMENT[temperament])

    def select_colleges_under_temperament(self, temperament, college_list):
        for college in college_list:
            print('-' * 50)
            print(college)
            for profession in college_list[college].items():
                if temperament in profession[-1]:
                    print('Под ваш темперамент подходит профессия:', profession[0])

    for question in QUESTION_LIST:
        # participant_answer = bool(int(input(question))) # 1 or 0
        participant_answer = random.choice([True, False])
        participant.current_answers.append(participant_answer)

    # print(participant.current_answers)


MainActions = Main()
MainActions.check_answers(participant.current_answers)

p = participant
temperament_scores = MainActions.check_temperament(p.extraversion_score, p.neuroticism_score, p.lie_score)
temperament_calculated = MainActions.temperament_calculate(p.extraversion_score, p.neuroticism_score, p.lie_score)
temp_text = MainActions.get_temperament_text(*temperament_calculated)

MainActions.select_colleges_under_temperament(temperament_calculated[0], colleges_Info.COLLEGES)

# print(p.extraversion_score, p.neuroticism_score, p.lie_score)
# print(temperament_scores)
print(temperament_calculated)
print(temp_text)

#
# COLLEGES = colleges_Info.COLLEGES
#
# for college in COLLEGES:
#     for profession in COLLEGES[college].items():
#         print(profession)
